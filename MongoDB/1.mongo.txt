
db.users.find()

db.users.insertOne({car: 'BMW', model: 's3', year: 2020})
db.users.insertMany([
    {car: 'BMW', model: 's3', year: 2020},
    {car: 'BMW', model: 's3', year: 2020}
]
    )

db.users.find({_id: ObjectId('65aea9a1b031d02f1b5c7a38')})

db.users.find({gender: 'female', rating: 2})

db.users.find(
    {gender: 'female', rating: 2},
    {age: true, _id: 0}
    )

db.users.find({
    $or: [
        {rating: 2, age: 5},
        {rating: 5},
        {age: 12}
    ]
})

db.users.find({
    $and: [
        {age: 12},
        {gender: 'male'},
        {rating: 2}
    ]
})

db.users.find({age: {$in: [25, 36, 20, 45]}})
db.users.find({age: {$nin: [25, 36, 20, 45]}})
db.users.find({
    age: {
        $not: {
            $in: [[25, 36, 20, 45]]
        }
    }
})

db.users.find({rating: {$gt: 2}}) // >
db.users.find({rating: {$lt: 3}}) // <
db.users.find({rating: {$gte: 3}}) // >=
db.users.find({rating: {$lte: 3}}) // <=
db.users.find({rating: {$ne: 3}}) // !=
db.users.find({rating: {$eq: 3}}) // ==
db.users.find({rating: 3}) // ==

db.users.find({name: 'Kira'})
db.users.find({name: /^a/i})
db.users.find({name: /A$/i})
db.users.find({name: /.{2}t/i})
db.users.find({name: /^k.*a$/i})
db.users.find({name: /.*v.*/i})

db.users.find().sort({rating: 1})
db.users.find().sort({rating: -1})
db.users.find().sort({rating: -1, name: 1})
db.users.find().sort({rating: -1, name: 1}).limit(2)
db.users.find().sort({rating: -1, name: 1}).limit(2).skip(6)


db.users.updateOne(
    {_id: ObjectId('65aea9a1b031d02f1b5c7a38')},
    {$set:{rating: 8}}
    )

db.users.find()

db.users.updateMany(
    {gender: 'male'},
    {$set: {gender: 'animal'}}
    )

db.users.find({"address.house": 25})
db.users.find({studying: 'java'})


db.users.find({parents: {$exists: 1}})
db.users.find({parents: {$exists: 0}})

db.users.find({parents: null})

db.users.find({'studying.1': 'java'})

db.users.updateMany(
    {parents: {$exists: 1}},
    {$set: {'parents.$[]': null}}
    )

db.users.updateOne(
    {_id: ObjectId('65aea9a1b031d02f1b5c7a38')},
    {$push: {studying: 'python'}}

)

db.users.updateOne(
    {_id: ObjectId('65aea9a1b031d02f1b5c7a38')},
    {$pull: {studying: 'css'}}

    )

db.users.deleteOne({_id:ObjectId('65aeab02b031d02f1b5c7a40')})





//////////////////////////////////////////////////////////////////////////////////////
// Використовує базу даних 'mongoLearn'
use mongoLearn

// Знайти всіх користувачів
db.users.find()

// Вставити нового користувача
db.users.insertOne({model:'BMW', price:20000, year:2008})

// Знайти жінок з адресою "address.house" рівним 45
db.users.find({gender:'female', "address.house":45})

// Знайти жінок з віком 29 та відобразити тільки ім'я та вік
db.users.find({gender:'female', age:29}, {_id:0, name:1, age:1})

// Знайти користувачів з рейтингом 2, 5 або віком 12
db.users.find({
    $or:[
        {rating:2},
        {rating:5},
        {age:12}
    ]
})

// Знайти жінок з адресою "address.house" рівним 45
db.users.find({
    $and:[
        {gender:'female'},
        {"address.house":45}
    ]
})

// Знайти користувачів з віками 25, 15, 26 або 18
db.users.find({age:{$in:[25, 15,26,18]}})

// Знайти користувачів з віками, які не входять до списку [25, 15, 26, 18]
db.users.find({age:{$nin:[25, 15,26,18]}})

// Знайти користувачів з віками, які не входять до списку [25, 15, 26, 18]
db.users.find({
    age:{
        $not:{
            $in:[25, 15,26,18]
        }
    }
})

// Знайти користувачів з ім'ями, що починаються на "a" (регістронезалежно)
db.users.find({name:/^a/})

// Знайти користувачів з ім'ями, що починаються на "a" (регістрозалежно)
db.users.find({name:/^a/i})

// Знайти користувачів з ім'ями, що закінчуються на "a" (регістрозалежно)
db.users.find({name:/a$/i})

// Знайти користувачів з ім'ями, які містять точно два символи перед "t" (регістрозалежно)
db.users.find({name:/^.{2}t/i})

// Знайти користувачів з ім'ями, які починаються на "k" і закінчуються на "a" (регістрозалежно)
db.users.find({name:/^k.*a$/i})

// Знайти користувачів з ім'ями, які містять символ "v" (регістрозалежно)
db.users.find({name:/.*v.*/i})

// Знайти всіх користувачів і відсортувати їх за рейтингом у зростаючому порядку
db.users.find().sort({rating:1})

// Знайти всіх користувачів і відсортувати їх за рейтингом у спадаючому порядку
db.users.find().sort({rating:-1})

// Знайти всіх користувачів і відсортувати їх за рейтингом у зростаючому та віку у зростаючому порядку
db.users.find().sort({rating:1, age:1})

// Знайти всіх користувачів, відсортувати за рейтингом у зростаючому порядку та обмежити до 2 записів
db.users.find().sort({rating:1, age:1}).limit(2)

// Знайти всіх користувачів, відсортувати за рейтингом у зростаючому порядку та віку у зростаючому порядку, обмежити до 2 записів і пропустити перші 6 записів
db.users.find().sort({rating:1, age:1}).limit(2).skip(6)

// Знайти користувачів з рейтингом більше 2
db.users.find({rating:{$gt:2}})

// Знайти користувачів з рейтингом більше або рівним 2
db.users.find({rating:{$gte:2}})

// Знайти користувачів з рейтингом менше 4
db.users.find({rating:{$lt:4}})

// Знайти користувачів з рейтингом менше або рівним 4
db.users.find({rating:{$lte:4}})

// Знайти користувачів з рейтингом не рівним 4
db.users.find({rating:{$ne:4}})

// Знайти користувача з рейтингом рівним 2 та обмежити до 1 запису
db.users.find({rating:2}).limit(1)

// Знайти користувача за ідентифікатором ObjectId
db.users.find({_id:ObjectId('65242ccdeec04c402c2fbe94')})

// Оновити рейтинг користувача за ідентифікатором ObjectId
db.users.updateOne(
    {_id:ObjectId('65242ccdeec04c402c2fbe94')},
    {$set:{rating:3}}
)

// Оновити стать користувачів з "male" на "animal"
db.users.updateMany(
    {gender:'male'},
    {$set:{gender:'animal'}}
)

// Знайти користувачів зі значенням "address.flat" більше 50
db.users.find({"address.flat":{$gt:50}})

// Знайти користувачів, які вивчають "java"
db.users.find({studying:'java'})

// Знайти користувачів, які вивчають дві різні предмети
db.users.find({studying:{$size:2}})

// Знайти користувачів, у яких відсутнє поле "parents"
db.users.find({parents:{$exists:0}})

// Знайти користувачів, які вивчають "java" та мають тільки один предмет
db.users.find({
    $and:[
        {studying:{$size:1}},
        {studying:'java'}
    ]
})

// Знайти всіх користувачів і оновити їхнього батька
db.users.find()
db.users.updateMany(
    {_id:ObjectId('65242ccdeec04c402c2fbe96')},
    // {$set:{'parents.0':'asd'}}
)

// Знайти користувача за ідентифікатором ObjectId
db.users.find({_id:ObjectId('65242ccdeec04c402c2fbe96')})

// Видалити одного користувача за ідентифікатором ObjectId
db.users.deleteOne({_id:ObjectId('65242da0eec04c402c2fbe99')})
